// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/apps/blob/main/LICENSE)

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VestingIInterface extends ethers.utils.Interface {
  functions: {
    "balances(string)": FunctionFragment;
    "clawback(string,string,string)": FunctionFragment;
    "convertVestingAccount(string)": FunctionFragment;
    "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)": FunctionFragment;
    "updateVestingFunder(string,string,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clawback",
    values: [string, string, string],
  ): string;
  encodeFunctionData(
    functionFragment: "convertVestingAccount",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "createClawbackVestingAccount",
    values: [
      string,
      string,
      BigNumberish,
      {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      boolean,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "updateVestingFunder",
    values: [string, string, string],
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clawback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertVestingAccount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClawbackVestingAccount",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVestingFunder",
    data: BytesLike,
  ): Result;

  events: {};
}

class VestingI extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VestingIInterface;

  functions: {
    balances(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<{
      locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    "balances(string)"(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<{
      locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    clawback(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    "clawback(string,string,string)"(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    convertVestingAccount(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    "convertVestingAccount(string)"(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    createClawbackVestingAccount(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)"(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    updateVestingFunder(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;

    "updateVestingFunder(string,string,string)"(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<ContractTransaction>;
  };

  balances(
    vestingAddress: string,
    overrides?: CallOverrides,
  ): Promise<{
    locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
  }>;

  "balances(string)"(
    vestingAddress: string,
    overrides?: CallOverrides,
  ): Promise<{
    locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
  }>;

  clawback(
    funderAddress: string,
    accountAddress: string,
    destAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  "clawback(string,string,string)"(
    funderAddress: string,
    accountAddress: string,
    destAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  convertVestingAccount(
    vestingAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  "convertVestingAccount(string)"(
    vestingAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  createClawbackVestingAccount(
    fromAddress: string,
    toAddress: string,
    startTime: BigNumberish,
    lockupPeriods: {
      length: BigNumberish;
      amount: { denom: string; amount: BigNumberish }[];
    }[],
    vestingPeriods: {
      length: BigNumberish;
      amount: { denom: string; amount: BigNumberish }[];
    }[],
    merge: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)"(
    fromAddress: string,
    toAddress: string,
    startTime: BigNumberish,
    lockupPeriods: {
      length: BigNumberish;
      amount: { denom: string; amount: BigNumberish }[];
    }[],
    vestingPeriods: {
      length: BigNumberish;
      amount: { denom: string; amount: BigNumberish }[];
    }[],
    merge: boolean,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  updateVestingFunder(
    funderAddress: string,
    newFunderAddress: string,
    vestingAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  "updateVestingFunder(string,string,string)"(
    funderAddress: string,
    newFunderAddress: string,
    vestingAddress: string,
    overrides?: Overrides,
  ): Promise<ContractTransaction>;

  callStatic: {
    balances(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<{
      locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    "balances(string)"(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<{
      locked: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      unvested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      vested: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      0: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      1: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
      2: { denom: string; amount: BigNumber; 0: string; 1: BigNumber }[];
    }>;

    clawback(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "clawback(string,string,string)"(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    convertVestingAccount(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "convertVestingAccount(string)"(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    createClawbackVestingAccount(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)"(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    updateVestingFunder(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    "updateVestingFunder(string,string,string)"(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    balances(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    "balances(string)"(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    clawback(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    "clawback(string,string,string)"(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    convertVestingAccount(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    "convertVestingAccount(string)"(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    createClawbackVestingAccount(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)"(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    updateVestingFunder(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;

    "updateVestingFunder(string,string,string)"(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    "balances(string)"(
      vestingAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    clawback(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    "clawback(string,string,string)"(
      funderAddress: string,
      accountAddress: string,
      destAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    convertVestingAccount(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    "convertVestingAccount(string)"(
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    createClawbackVestingAccount(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    "createClawbackVestingAccount(string,string,uint64,tuple[],tuple[],bool)"(
      fromAddress: string,
      toAddress: string,
      startTime: BigNumberish,
      lockupPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      vestingPeriods: {
        length: BigNumberish;
        amount: { denom: string; amount: BigNumberish }[];
      }[],
      merge: boolean,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    updateVestingFunder(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;

    "updateVestingFunder(string,string,string)"(
      funderAddress: string,
      newFunderAddress: string,
      vestingAddress: string,
      overrides?: Overrides,
    ): Promise<PopulatedTransaction>;
  };
}
